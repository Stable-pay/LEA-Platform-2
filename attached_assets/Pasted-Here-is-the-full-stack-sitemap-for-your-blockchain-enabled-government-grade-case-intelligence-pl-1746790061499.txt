Here is the **full-stack sitemap** for your blockchain-enabled government-grade case intelligence platform. It covers the entire architecture from **frontend UI/UX routes**, **backend APIs**, **database schema**, to **blockchain nodes via Hyperledger Fabric**‚Äîintegrating all key departments: FIU-IND, ED, Income Tax, Banks, VASPs, I4C, and Judiciary.

---

## üß© FULL STACK SITEMAP: BLOCKCHAIN INVESTIGATION PLATFORM

---

### üñ•Ô∏è 1. **Frontend (React + Tailwind + Radix UI)**

#### üåê **Public Routes (No Authentication)**

| Route        | Description            |
| ------------ | ---------------------- |
| `/`          | Landing Dashboard      |
| `/auth`      | Login / Sign-up Portal |
| `/not-found` | 404 Page               |

#### üîê **Protected Routes (Role-Based Access)**

| Route              | Description                                            |
| ------------------ | ------------------------------------------------------ |
| `/dashboard`       | Role-specific dashboard (LEA/FIU/I4C/ED/etc.)          |
| `/case-filing`     | File new case form (multi-step, wallet, KYC, evidence) |
| `/case-management` | List and manage cases (filters, status, tags)          |
| `/wallet-check`    | Wallet address scan (with risk score, Arkham link)     |
| `/pattern-scan`    | Pattern scanner interface                              |
| `/str-generator`   | Auto-fill STR from scanned patterns                    |
| `/analytics`       | Stats + Compliance heatmaps                            |
| `/scam-heatmap`    | Geolocation view of scams                              |
| `/network-graph`   | Network graph view (wallets, victims, links)           |
| `/court-export`    | Court export creator (PDF, hash, JSON)                 |

> üí° All pages use `AppShell` with sidebar, role context, and Replit Auth or JWT.

---

### ‚öôÔ∏è 2. **Backend API (Express/Node.js + PostgreSQL)**

#### üîê Auth `/api/auth`

* `POST /login`
* `POST /register`
* `GET /verify`

#### üóÇÔ∏è Case System `/api/cases`

* `GET /` ‚Üí All cases by role/org
* `POST /` ‚Üí New case entry
* `GET /:id` ‚Üí Detailed view
* `PATCH /:id/status` ‚Üí Update case status
* `POST /:id/evidence` ‚Üí Upload & hash evidence

#### üîç Wallet Tools `/api/wallets`

* `POST /validate` ‚Üí Check wallet risk
* `GET /history/:address` ‚Üí Show transactions
* `POST /flag` ‚Üí Mark address as malicious
* `GET /sync-arkham` ‚Üí Real-time Arkham pull

#### üìà Risk/Pattern Analysis `/api/patterns`

* `POST /scan` ‚Üí Trigger wallet/flow scan
* `GET /alerts` ‚Üí Show anomaly reports

#### üìÉ STR Management `/api/str-reports`

* `POST /generate` ‚Üí Auto-generate STR
* `POST /:id/submit` ‚Üí Submit to FIU-IND
* `GET /:id/download` ‚Üí Download version

#### ‚öñÔ∏è Court Export `/api/court-exports`

* `GET /:id/pdf`
* `GET /:id/json`
* `GET /:id/hash` (SHA256 from Fabric)

#### üîó Blockchain `/api/blockchain`

* `POST /anchor-case/:id`
* `GET /query-hash/:hash`
* `GET /export-ledger`
* `WebSocket /events` (live blockchain updates)

---

### üß† 3. **Database Schema (PostgreSQL)**

| Table         | Key Fields                                                  |
| ------------- | ----------------------------------------------------------- |
| `users`       | id, name, role, department, auth\_hash                      |
| `cases`       | id, wallet\[], title, description, status, blockchain\_hash |
| `wallets`     | address, risk\_score, tags\[], arkham\_data                 |
| `evidence`    | file\_hash, filename, uploaded\_by, linked\_case\_id        |
| `patterns`    | id, scan\_type, affected\_wallets\[], alert\_level          |
| `str_reports` | id, case\_id, risk\_score, fiu\_submitted\_on               |
| `exports`     | id, case\_id, pdf\_url, json\_url, sha256\_hash             |
| `audit_logs`  | action, user, role, metadata, timestamp                     |

---

### üß± 4. **Blockchain Layer (Hyperledger Fabric)**

#### üîó Smart Contracts (Chaincode)

| Contract          | Function                      |
| ----------------- | ----------------------------- |
| `CaseChaincode`   | Anchor case metadata & status |
| `WalletTraceCode` | Record flagged wallets        |
| `STRChaincode`    | Confirm STR submissions       |
| `KYCHandlerCode`  | Verify KYC from bank/exchange |
| `CourtExportCode` | Immutable court proof hash    |

#### üèõÔ∏è Nodes

| Node                                | Description                             |
| ----------------------------------- | --------------------------------------- |
| Org1: FIU-IND Node                  | STR Verification + Compliance Chaincode |
| Org2: ED Node                       | High-value transaction trails           |
| Org3: I4C Node                      | Pattern scan and escalation             |
| Org4: Bank/VASP Node                | KYC response only (read/write audit)    |
| Org5: Judiciary Node                | Final hash verification for court       |
| Org6: National Dashboard (Gov View) | Scam map, graphs, aggregate stats       |

> üì° Channels ensure privacy: e.g., **FIU‚ÄìBank**, **LEA‚ÄìED**, **I4C‚ÄìJudiciary**

---

### üíæ 5. **File Storage**

* Evidence ‚Üí IPFS or AWS S3 (reference hash only on-chain)
* STR & Export ‚Üí Encrypted vault (SHA256 on chain)
* Arkham + Chainalysis data ‚Üí Synced via background job

---

### üì° 6. **External Integrations**

| Service                   | Use                            |
| ------------------------- | ------------------------------ |
| **Arkham Intelligence**   | Wallet metadata & labels       |
| **Chainalysis / TRM**     | Risk score sync                |
| **Notabene**              | KYC & Travel Rule verification |
| **FIU-IND**               | STR push & fetch APIs          |
| **Income Tax API**        | UTR trace (planned)            |
| **Judiciary e-Court API** | e-Filing exports               |

---

### üéõÔ∏è 7. **DevOps & Infra**

| Component               | Description                                 |
| ----------------------- | ------------------------------------------- |
| Docker + Kubernetes     | Scalable microservices                      |
| NGINX                   | Reverse proxy and routing                   |
| PostgreSQL + Prisma ORM | Reliable relational backend                 |
| Redis                   | Queues & cache                              |
| Hyperledger Fabric      | Blockchain ledger with endorsement policies |
| IPFS or S3              | Evidence & document storage                 |
| WebSocket               | Blockchain push updates                     |

---

Would you like:

* A clickable Figma/Framer prototype?
* Swagger/OpenAPI spec for backend?
* Terraform/Infra-as-code setup for deployment?

Let me know what format you'd like this packaged in (PDF, Google Doc, GitHub repo, etc.).
